# 메소드

# 클래스 내에서 정의되는 함수인 메소드(method)
# 클래스에는 여러 개의 메소드를 정의할 수 있다.
# 일반 함수와의 차이점은 메소드는 전달값을 정의하는 부분 처음에 self를 적어준다는 점.
# 메소드 내에서 self.을 통해 클래스 맴버변수에 접근 가능하다는 점

# 스타크래프트에는 공격을 할 수 있는 유닛이 대부분이지만 공격을 할 수 없는 유닛도 있다.
# 예를 들어 드랍쉽(수송), 메딕(치료)
# 공격 할 수 있는 유닛만을 위한 새로운 클래스를 정의 하고 이름을 AttackUnit이라고 정의 

class AttackUnit: # 공격 유닛
    def __init__(self,name,hp,damage):
        self.name = name
        self.hp = hp
        self.damage = damage


# 스타크래프트는 넓은 땅에서 전쟁을 하는 만큼 적군의 위치를 1시 방향, 9시 방향과 같이 시계 기준으로 표현한다.
# 공격 명령을 받아서 공격을 갈 때는 해당 유닛 이름과 전달받은 공격 방향 정보, 그리고 공격력을 출력해줍니다.
# 이 때 유닛 이름과 공격력은 이미 클래스 객체의 맴버 변수로 정의되어 있기 때문에 자기 자신을 의미하는 self.을 쓰고 
# 공격 방향은 명령을 받을 때마다 달라질 수 있으므로 맴버 변수가 아닌 전달값을 사용하기 위해 self.없이 쓴다는점을 주의하자

    def attack(self,location): # 전달 받은 방향으로 공격
        print("{0} : {1}방향으로 적군을 공격합니다. [공격력{2}]".format(self.name,location,self.damage)) # 공간이 좁아서 2줄에 걸쳐 출력
# 하나의 문장이 길어서 한 줄에 모두 표현하기 어렵거나 보기 좋게 두줄 이상으로 나누고자 할때는 문장 끝에 역슬래시(\)를 넣어 다음 줄에서 계속하여 문장을 이어갈 수 있다.

# 공격을 받아 피해를 입는 동작을 정의
# 적군의 공격 유닛은 종류별로 다른 공격력을 가지며 상황에 따라 피해 데미지도 달라질 수 있으므로 damage를 전달값으로 받는다.
# 유닛이 현재 가지고 있는 체력 정보에서 데미지 만큼 값을 뺀다. 공격을 받아 남은 체력이 0이하라면 해당유닛은 파괴처리를 하자.

    def damaged(self,damage): #damage 만큼 유닛 피해
        print("{0} : {1} 데미지를 입었습니다.".format(self.name,damage)) # 데미지 정보 출력
        self.hp -= damage # 유닛의 체력에서 전달받은 damage만큼 감소
        print("{0} : 현재 체력은 {1} 입니다.".format(self.name,self.hp)) # 남은 체력 출력
        if self.hp <= 0: # 남은 체력이 0 이하이면?
            print("{0} : 파괴되었습니다.".format(self.name)) # 유닛 파괴 처리

# 파이어벳을 하나 만들고 5시 방향으로 공격

# 파이어벳 : 공격 유닛, 화염방사기
firebat1 = AttackUnit("파이어벳", 50, 16) # 체력 50, 공격력 16
firebat1.attack("5시") # 5시 방향으로 공격 명력 

# 공격하는중 공격을 받는다고 생각
firebat1.damaged(25) # 남은 체력 25
firebat1.damaged(25) # 남은 체력 0